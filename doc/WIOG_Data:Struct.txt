wiog_event_rxdata_t;
	
    wifi_pkt_rx_ctrl_t       //Infodaten des Sniffers
        signed rssi:8;                /**< Received Signal Strength Indicator(RSSI) of packet. unit: dBm */
        unsigned rate:5;              /**< PHY rate encoding of the packet. Only valid for non HT(11bg) packet */
        unsigned sig_mode:2;          /**< 0: non HT(11bg) packet; 1: HT(11n) packet; 3: VHT(11ac) packet */
        unsigned mcs:7;               /**< Modulation Coding Scheme. If is HT(11n) packet, shows the modulation, range from 0 to 76(MSC0 ~ MCS76) */
        unsigned cwb:1;               /**< Channel Bandwidth of the packet. 0: 20MHz; 1: 40MHz */
        unsigned aggregation:1;       /**< Aggregation. 0: MPDU packet; 1: AMPDU packet */
        unsigned stbc:2;              /**< Space Time Block Code(STBC). 0: non STBC packet; 1: STBC packet */
        unsigned fec_coding:1;        /**< Flag is set for 11n packets which are LDPC */
        unsigned sgi:1;               /**< Short Guide Interval(SGI). 0: Long GI; 1: Short GI */
        signed noise_floor:8;         /**< noise floor of Radio Frequency Module(RF). unit: 0.25dBm*/

        unsigned ampdu_cnt:8;         /**< ampdu cnt */
        unsigned channel:4;           /**< primary channel on which this packet is received */
        unsigned secondary_channel:4; /**< secondary channel on which this packet is received. 0: none; 1: above; 2: below */
        unsigned timestamp:32;        /**< timestamp. The local time when this packet is received. It is precise only if modem sleep or light sleep is not enabled. unit: microsecond */
        unsigned ant:1;               /**< antenna number from which this packet is received. 0: WiFi antenna 0; 1: WiFi antenna 1 */
        unsigned sig_len:12;          /**< length of packet including Frame Check Sequence(FCS) */
        unsigned rx_state:8;          /**< state of the packet. 0: no error; others: error numbers which are not public */

	wiog_header_t              //WIOG - Header
    	//MAC-Header Byte 00 .. 23
    	uint16_t frame_ctrl;
    	uint16_t duration;
    	mac_addr_t mac_to;
    	mac_addr_t mac_from;
    	mac_addr_t mac_net;
    	uint16_t seq_ctrl;
    	//Vendor-Header 24..37      //Verwaltungsdaten
    	uint8_t vtype;
    	uint8_t tagA;
    	uint8_t tagB;
    	int16_t tagC;
    	uint8_t species;
    	int8_t txpwr;
    	uint8_t channel;
    	uint16_t uid;
    	uint32_t frameid;			//Frame-ID f. verify Ack, Random32

	int64_t timestamp;
	int data_len;                   //Nutzdatenlänge
	uint8_t *data;                  //Nutzdaten

// **************************************************************************************************************************

wiog_event_txdata_t            //Tx-Daten in die Tx-Queue stellen
	wiog_header_t
    	//MAC-Header Byte 00 .. 23
    	uint16_t frame_ctrl;
    	uint16_t duration;
    	mac_addr_t mac_to;
    	mac_addr_t mac_from;
    	mac_addr_t mac_net;
    	uint16_t seq_ctrl;
    	//Vendor-Header 24..37      //Verwaltungsdaten
    	uint8_t vtype;
    	uint8_t species;
    	int8_t txpwr;
    	uint8_t channel;
    	uint16_t uid;
    	uint32_t frameid;			//Frame-ID f. verify Ack, Random32 
    	uinion {					//Wahlweise freie Var oder next Interval im Ack
    		uint8_t tagA;
    		uint8_t tagB;
    		int16_t tagC;
    		uint32_t interval;
    		}   
	int64_t target_time;	        //Sendezeitpunkt -> obsolete !!!
	uint8_t tx_max_repeat;	        //Tx-Wiederholung 0 => es wird kein Ack erwartet
	bool crypt_data;		        //true -> Datenblock wird verschlüsselt
	uint16_t data_len;		        //Länge des Datenpaketes in Bytes
	uint8_t  *data;			        //Pointer auf Datenpaket
 

// **********************************************************************************************************************


wiog_data_frame_t            //Payload Rx-Packets
	wiog_header_t
        //MAC-Header Byte 00 .. 23
    	uint16_t frame_ctrl;
    	uint16_t duration;
    	mac_addr_t mac_to;
    	mac_addr_t mac_from;
    	mac_addr_t mac_net;
    	uint16_t seq_ctrl;
    	//Vendor-Header 24..37      //Verwaltungsdaten
    	uint8_t vtype;
    	uint8_t species;
    	int8_t txpwr;
    	uint8_t channel;
    	uint16_t uid;
    	uint32_t frameid;			//Frame-ID f. verify Ack, Random
    	uinion {					//Wahlweise freie Var oder next Interval im Ack
    		uint8_t tagA;
    		uint8_t tagB;
    		int16_t tagC;
    		uint32_t interval;
    		}
	uint8_t *data;

// ***********************************************************************************************************************


